// code written by Anthony Hayes
// Comments generated by ChatGPT
import React, { useState, useEffect } from "react";
import axios from "axios";
import YahooFinance from "yahoo-finance2";

const StockAPI = ({ setStockData }) => {
  // Local state to manage the loading state
  const [isLoading, setIsLoading] = useState(true);

  // List of S&P 500 stock symbols to fetch data for
  const sp500Symbols = ["AAPL", "MSFT", "GOOGL", "AMZN", "TSLA"];

  // Function to fetch stock prices for the S&P 500 index and top stocks
  const fetchStockPricesInBatches = async () => {
    try {
      console.log("Fetching stock prices...");

      // Fetching data for the S&P 500 index
      const sp500Data = await YahooFinance.quote({
        symbols: ["^GSPC"], // S&P 500 index symbol
        modules: ["price"], // Requesting only price data
      });
      const sp500Index = sp500Data["^GSPC"]?.price.regularMarketPrice;

      // Fetching data for top 5 stocks (AAPL, MSFT, GOOGL, AMZN, TSLA)
      const quotes = await YahooFinance.quote({
        symbols: sp500Symbols,
        modules: ["price"], // Requesting price data for each stock
      });

      // Mapping stock symbols to their prices, only including those with valid prices
      const prices = sp500Symbols.map((symbol) => ({
        symbol,
        price: quotes[symbol]?.price.regularMarketPrice || null,
      }));

      // Sorting stocks by price in descending order and selecting the top 5
      const sortedPrices = prices
        .filter((stock) => stock.price !== null) // Exclude stocks without a valid price
        .sort((a, b) => b.price - a.price) // Sort by price in descending order
        .slice(0, 5); // Only take the top 5 stocks

      // Update the stock data using the provided setStockData function
      setStockData({
        sp500Index,
        stockPrices: sortedPrices,
      });
    } catch (error) {
      console.error("Error fetching stock prices:", error);
    }
  };

  // Function to fetch the current price of gold from an external API
  const fetchGoldPrice = async () => {
    try {
      // Make an API call to fetch the gold price (XAU/USD)
      const response = await axios.get(`https://www.goldapi.io/api/XAU/USD`, {
        headers: {
          "x-access-token": "goldapi-15f6ksm4h0vbib-io", // Replace with your actual API token
        },
      });
      return response.data.price; // Return the price from the API response
    } catch (error) {
      console.error("Error fetching gold price:", error);
      return null; // If error occurs, return null for gold price
    }
  };

  // Function to fetch the current 3-month T-Bill rate
  const fetchTBillPrice = async () => {
    try {
      // Make an API call to fetch the T-Bill rate (DTB3)
      const response = await axios.get(
        `https://cors-anywhere.herokuapp.com/https://api.stlouisfed.org/fred/series/observations`,
        {
          params: {
            series_id: "DTB3", // 3-Month T-Bill Rate series ID
            api_key: "e451d55fcf73e9e83c20f51b9f73b0a1", // Replace with your actual API key
            file_type: "json", // Request data in JSON format
            limit: 1, // Limit the response to 1 observation (latest data)
          },
        }
      );

      // Check if the API returned valid data
      if (
        response.data &&
        response.data.observations &&
        response.data.observations.length > 0
      ) {
        return response.data.observations[0].value; // Return the T-Bill rate
      } else {
        return "No T-Bill data available."; // Return a fallback message if data is missing
      }
    } catch (error) {
      console.error("Error fetching T-Bill price:", error);
      return "Error fetching T-Bill data."; // Return an error message in case of failure
    }
  };

  // useEffect hook to fetch data when the component mounts
  useEffect(() => {
    const fetchData = async () => {
      setIsLoading(true); // Set loading to true while fetching data
      try {
        // Fetch the gold price, T-Bill price, and stock prices asynchronously
        const goldPrice = await fetchGoldPrice();
        const tBillPrice = await fetchTBillPrice();
        await fetchStockPricesInBatches(); // Fetch stock prices in batches
        // Update the stock data with the newly fetched gold and T-Bill prices
        setStockData((prevData) => ({
          ...prevData,
          goldPrice,
          tBillPrice,
        }));
      } catch (error) {
        console.error("Error fetching data:", error); // Log any errors
      } finally {
        setIsLoading(false); // Set loading to false after data fetching is complete
      }
    };

    fetchData(); // Call the fetchData function to initiate data fetch
  }, [setStockData]); // Dependency array: runs once when the component mounts

  // Display loading message while data is being fetched
  return <div>{isLoading ? <p>Loading...</p> : null}</div>;
};

export default StockAPI;
