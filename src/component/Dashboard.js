// Dashboard code written by Anthony Hayes
// Comments generated by AI
import React, { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import { auth, db } from "../firebase"; // Ensure Firebase is initialized
import axios from "axios";
import YahooFinance from "yahoo-finance2";
import FilterLogic from "../filtering_logic/filter_logic"; // Import filter logic component
import { Dropdown, Button, Spinner, Card, ListGroup } from "react-bootstrap"; // UI components from React Bootstrap
import { doc, getDoc } from "firebase/firestore"; // Firestore functions to retrieve data
import { onAuthStateChanged } from "firebase/auth";

function Dashboard() {
  // Local state variables for various data items and UI elements
  const [stockPrices, setStockPrices] = useState([]); // Stores the top stock prices
  const [goldPrice, setGoldPrice] = useState(null); // Stores the current gold price
  const [tBillPrice, setTBillPrice] = useState(null); // Stores the T-Bill price
  const [sp500IndexPrice, setSp500IndexPrice] = useState(null); // Stores the S&P 500 Index price
  const [portfolioRecommendation, setPortfolioRecommendation] = useState(null); // Stores the portfolio recommendation
  const [isMenuOpen, setIsMenuOpen] = useState(false); // Controls the state of the dropdown menu
  const [isLoggedIn, setIsLoggedIn] = useState(false); // Tracks user login status
  const [isLoading, setIsLoading] = useState(true); // Tracks the loading state during data fetching
  const navigate = useNavigate(); // Hook for navigation between pages

  const sp500Symbols = ["AAPL", "MSFT", "GOOGL", "AMZN", "TSLA"]; // List of stock symbols to fetch

  // Function to fetch stock prices for top S&P 500 companies and the S&P 500 Index
  const fetchStockPricesInBatches = async () => {
    try {
      console.log("Fetching stock prices...");

      // Fetching S&P 500 index price
      const sp500Data = await YahooFinance.quote({
        symbols: ["^GSPC"], // S&P 500 index symbol
        modules: ["price"], // Only fetching the price data
      });
      const sp500Index = sp500Data["^GSPC"]?.price.regularMarketPrice;
      setSp500IndexPrice(sp500Index || "No data available"); // Set the S&P 500 index price

      // Fetching prices for the top 5 S&P 500 stocks
      const quotes = await YahooFinance.quote({
        symbols: sp500Symbols,
        modules: ["price"], // Fetch price data
      });

      // Mapping each stock symbol to its price
      const prices = sp500Symbols.map((symbol) => ({
        symbol,
        price: quotes[symbol]?.price.regularMarketPrice || null, // Set price or null if unavailable
      }));

      // Sorting stocks by price in descending order and selecting the top 5
      const sortedPrices = prices
        .filter((stock) => stock.price !== null) // Exclude stocks without a valid price
        .sort((a, b) => b.price - a.price) // Sort stocks by price
        .slice(0, 5); // Only take the top 5

      console.log("Top 5 stock prices:", sortedPrices);
      setStockPrices(sortedPrices); // Set the top 5 stock prices
    } catch (error) {
      console.error("Error fetching stock prices:", error); // Error handling
    }
  };

  // Function to fetch the current gold price from the Gold API
  const fetchGoldPrice = async () => {
    try {
      const response = await axios.get(`https://www.goldapi.io/api/XAU/USD`, {
        headers: {
          "x-access-token": "goldapi-15f6ksm4h0vbib-io", // API token for Gold API
        },
      });
      console.log("Gold Price:", response.data.price); // Log gold price
      setGoldPrice(response.data.price); // Set gold price
    } catch (error) {
      console.error("Error fetching gold price:", error); // Error handling
    }
  };

  // Function to fetch the current T-Bill price (3-month T-Bill rate)
  const fetchTBillPrice = async () => {
    try {
      const response = await axios.get(
        `https://cors-anywhere.herokuapp.com/https://api.stlouisfed.org/fred/series/observations`,
        {
          params: {
            series_id: "DTB3", // Series ID for 3-Month T-Bill rate
            api_key: "e451d55fcf73e9e83c20f51b9f73b0a1", // API key for the FRED API
            file_type: "json", // Requesting data in JSON format
            limit: 1, // Limit the response to the latest observation
          },
        }
      );

      // Check if the data was successfully retrieved
      if (
        response.data &&
        response.data.observations &&
        response.data.observations.length > 0
      ) {
        const tBillRate = response.data.observations[0].value;
        console.log("T-Bill Rate:", tBillRate); // Log the T-Bill rate
        setTBillPrice(tBillRate); // Set the T-Bill price
      } else {
        setTBillPrice("No T-Bill data available."); // If no data is available, set a fallback message
      }
    } catch (error) {
      console.error("Error fetching T-Bill price:", error.message); // Error handling
      setTBillPrice(`Error fetching T-Bill data: ${error.message}`); // Set error message if the fetch fails
    }
  };

  // Function to fetch portfolio recommendation from Firestore
  const fetchPortfolioRecommendation = async (userId) => {
    try {
      const userRef = doc(db, "users", userId); // Reference to the user's document in Firestore
      const docSnap = await getDoc(userRef); // Fetch user document from Firestore

      // If the document exists, retrieve the "portfolio" field
      if (docSnap.exists()) {
        setPortfolioRecommendation(
          docSnap.data().portfolio || "No recommendation available" // Set portfolio recommendation
        );
        console.log("Portfolio Recommendation:", docSnap.data().portfolio); // Log the portfolio recommendation
      } else {
        console.log("No portfolio recommendation found for user");
        setPortfolioRecommendation("No recommendation available"); // Set a fallback message if no data is found
      }
    } catch (error) {
      console.error("Error fetching portfolio recommendation:", error); // Error handling
      setPortfolioRecommendation("Error fetching recommendation"); // Set error message if the fetch fails
    }
  };

  // useEffect hook to fetch data when the component mounts
  useEffect(() => {
    const fetchData = async () => {
      setIsLoading(true); // Set loading to true while fetching data
      try {
        // Fetch data concurrently for stock prices, gold price, and T-Bill price
        await Promise.all([
          fetchStockPricesInBatches(),
          fetchGoldPrice(),
          fetchTBillPrice(),
        ]);
      } catch (error) {
        console.error("Error fetching data:", error); // Error handling
      } finally {
        setIsLoading(false); // Set loading to false when data fetching is done
      }
    };

    fetchData(); // Call the function to fetch the data
  }, []); // Empty dependency array to ensure this effect runs once when the component mounts

  useEffect(() => {
    // Listen for Firebase auth changes
    const unsubscribe = onAuthStateChanged(auth, (user) => {
      if (user) {
        setIsLoggedIn(true); // User is logged in
      } else {
        setIsLoggedIn(false); // User is not logged in
      }
    });
    return () => unsubscribe(); // Cleanup listener on unmount
  }, []);

  return (
    <div className="container mt-4">
      <h1 className="mb-4">Dashboard</h1>
      <Dropdown>
        <Dropdown.Toggle variant="primary" id="dropdown-basic">
          Menu
        </Dropdown.Toggle>

        <Dropdown.Menu>
          {isLoggedIn ? (
            <>
              <Dropdown.Item onClick={() => navigate("/profile")}>
                Profile
              </Dropdown.Item>
              <Dropdown.Item onClick={() => navigate("/friend-system")}>
                Friends
              </Dropdown.Item>
              <Dropdown.Item onClick={() => navigate("/receipts")}>
                Receipts
              </Dropdown.Item>
              <Dropdown.Item
                onClick={() => navigate("/Investment-Questionnaire")}
              >
                Investment Questionnaire
              </Dropdown.Item>
              <Dropdown.Item onClick={() => navigate("/settings")}>
                Settings
              </Dropdown.Item>
              <Dropdown.Item onClick={() => auth.signOut()}>
                Log Out
              </Dropdown.Item>
            </>
          ) : (
            <Dropdown.Item onClick={() => navigate("/")}>Login</Dropdown.Item>
          )}
        </Dropdown.Menu>
      </Dropdown>
      <Card className="my-4">
        <Card.Body>
          <Card.Title>S&P 500 Index</Card.Title>
          <Card.Text>
            {isLoading ? (
              <Spinner animation="border" size="sm" />
            ) : sp500IndexPrice ? (
              `$${sp500IndexPrice}`
            ) : (
              "No data available"
            )}
          </Card.Text>
        </Card.Body>
      </Card>
      {/* Top 5 Stock Prices Section */}
      <Card className="my-4">
        <Card.Body>
          <Card.Title>Top 5 S&P 500 Stock Prices</Card.Title>
          <ListGroup>
            {stockPrices.length > 0 ? (
              stockPrices.map((stock) => (
                <ListGroup.Item key={stock.symbol}>
                  {stock.symbol}: {stock.price ? `$${stock.price}` : "N/A"}
                </ListGroup.Item>
              ))
            ) : (
              <ListGroup.Item>No stock prices available.</ListGroup.Item>
            )}
          </ListGroup>
        </Card.Body>
      </Card>
      {/* Gold Price Section */}
      <Card className="my-4">
        <Card.Body>
          <Card.Title>Gold Price</Card.Title>
          <Card.Text>
            {isLoading ? (
              <Spinner animation="border" size="sm" />
            ) : goldPrice ? (
              `$${goldPrice}`
            ) : (
              "No data available"
            )}
          </Card.Text>
        </Card.Body>
      </Card>
      {/* T-Bill Price Section */}
      <Card className="my-4">
        <Card.Body>
          <Card.Title>3-Month T-Bill Price</Card.Title>
          <Card.Text>
            {isLoading ? (
              <Spinner animation="border" size="sm" />
            ) : tBillPrice ? (
              `${tBillPrice}%`
            ) : (
              "No data available"
            )}
          </Card.Text>
        </Card.Body>
      </Card>
      {/* Data Table */}
      <FilterLogic /> {/* Custom filter logic component */}
    </div>
  );
}

export default Dashboard;
