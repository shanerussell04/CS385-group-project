// Code by SeÃ¡n McConnon
//Comments generated by ChatGPT
import React, { useEffect, useState } from "react";
import { useNavigate } from "react-router-dom";
import { auth, db } from "../firebase"; // Import Firebase authentication and Firestore
import { doc, getDoc } from "firebase/firestore"; // Import Firestore functions to get user data
import { Dropdown, Button, Spinner } from "react-bootstrap"; // Import components from react-bootstrap for UI elements

function Profile() {
  const navigate = useNavigate(); // Hook to programmatically navigate between routes
  const [userData, setUserData] = useState(null); // State to store user profile data
  const [loading, setLoading] = useState(true); // State to manage loading indicator
  const [message, setMessage] = useState(""); // State to display error or informational messages
  const [isMenuOpen, setIsMenuOpen] = useState(false); // State to track dropdown menu visibility

  // Fetch user data from Firestore when the component mounts
  useEffect(() => {
    const fetchUserData = async () => {
      try {
        const user = auth.currentUser; // Get the currently authenticated user
        if (user) {
          const docRef = doc(db, "users", user.uid); // Reference to the user's document in Firestore
          const docSnap = await getDoc(docRef); // Fetch the document snapshot

          if (docSnap.exists()) {
            setUserData(docSnap.data()); // Update state with fetched user data
          } else {
            setMessage("User data not found."); // Set error message if document doesn't exist
          }
        } else {
          setMessage("No user is logged in."); // Set error message if no user is authenticated
        }
      } catch (error) {
        setMessage("Error fetching user data: " + error.message); // Handle and display any errors
      } finally {
        setLoading(false); // Stop the loading spinner after data fetch
      }
    };

    fetchUserData(); // Call the fetch function
  }, []); // Empty dependency array ensures this runs once when the component mounts

  // Function to toggle the visibility of the dropdown menu
  const toggleMenu = () => {
    setIsMenuOpen(!isMenuOpen);
  };

  // Render a loading spinner while data is being fetched
  if (loading) {
    return (
      <div className="d-flex justify-content-center align-items-center min-vh-100">
        <Spinner animation="border" role="status">
          <span className="visually-hidden">Loading...</span>
        </Spinner>
      </div>
    );
  }

  // Render an error message if something goes wrong or user data is missing
  if (message) {
    return (
      <div className="d-flex justify-content-center align-items-center min-vh-100 text-center">
        <div>
          <h2 className="text-danger">{message}</h2>
          {/* Redirect to the login page */}
          <button
            className="btn btn-primary mt-3"
            onClick={() => navigate("/login")}
          >
            Go to Login
          </button>
        </div>
      </div>
    );
  }

  // Render the user's profile information
  return (
    <div className="container py-5">
      <div className="card shadow-lg mx-auto" style={{ maxWidth: "600px" }}>
        <div className="card-body">
          <h2 className="text-center mb-4">Profile</h2>
          <ul className="list-group list-group-flush">
            {/* Display user profile details */}
            <li className="list-group-item">
              <strong>Username:</strong> {userData.username}
            </li>
            <li className="list-group-item">
              <strong>Name:</strong> {userData.name}
            </li>
            <li className="list-group-item">
              <strong>Email:</strong> {auth.currentUser.email}
            </li>
            <li className="list-group-item">
              <strong>Age:</strong> {userData.age}
            </li>
            <li className="list-group-item">
              <strong>Income:</strong> {userData.income}
            </li>
            <li className="list-group-item">
              <strong>County:</strong> {userData.county}
            </li>
            <li className="list-group-item">
              <strong>Employment Status:</strong> {userData.employmentStatus}
            </li>
            <li className="list-group-item">
              <strong>Savings:</strong> {userData.savings}
            </li>
          </ul>

          {/* Dropdown menu for navigation and user actions */}
          <div className="text-center mt-4">
            <Button variant="primary" onClick={toggleMenu}>
              Menu
            </Button>
            {isMenuOpen && (
              <Dropdown.Menu show>
                <Dropdown.Item onClick={() => navigate("/dashboard")}>
                  Dashboard
                </Dropdown.Item>
                <Dropdown.Item onClick={() => navigate("/friend-system")}>
                  Friends
                </Dropdown.Item>
                <Dropdown.Item onClick={() => navigate("/receipts")}>
                  Receipts
                </Dropdown.Item>
                <Dropdown.Item
                  onClick={() => navigate("/investment-questionnaire")}
                >
                  Investment Questionnaire
                </Dropdown.Item>
                <Dropdown.Item onClick={() => navigate("/settings")}>
                  Settings
                </Dropdown.Item>
                {/* Logout functionality */}
                <Dropdown.Item onClick={() => auth.signOut()}>
                  Log Out
                </Dropdown.Item>
              </Dropdown.Menu>
            )}
          </div>
        </div>
      </div>
    </div>
  );
}

export default Profile;
