// Code written by Anthony Hayes
// Comments generated by Anthony Hayes

import React, { useState, useEffect, useRef } from "react";
import { useLocation, useNavigate } from "react-router-dom";
import { Pie, Line } from "react-chartjs-2"; // Import both Pie and Line charts
import {
  Chart as ChartJS,
  ArcElement,
  Tooltip,
  Legend,
  PointElement,
  LineElement,
  CategoryScale,
  LinearScale,
} from "chart.js"; // Import necessary elements for Chart.js
import { db } from "../firebase"; // Firebase Firestore
import { getDoc, doc } from "firebase/firestore"; // Firestore functions
import { getAuth } from "firebase/auth"; // Firebase authentication

// Register chart.js components
ChartJS.register(
  ArcElement,
  Tooltip,
  Legend,
  PointElement,
  LineElement,
  CategoryScale,
  LinearScale
);

const RecommendationPage = () => {
  const location = useLocation();
  const { recommendation } = location.state || {}; // Get recommendation from navigation state
  const [userRecommendation, setUserRecommendation] = useState(null); // Store user recommendation
  const [loading, setLoading] = useState(true); // To track loading state
  const [isMenuOpen, setIsMenuOpen] = useState(false); // Manage menu visibility

  // Initialize navigation hook
  const navigate = useNavigate();

  // Use effect to fetch data if no recommendation is passed in
  useEffect(() => {
    if (!recommendation) {
      const user = getAuth().currentUser; // Get current user
      if (user) {
        const userRef = doc(db, "users", user.uid); // Reference to user's Firestore document
        getDoc(userRef)
          .then((docSnap) => {
            if (docSnap.exists()) {
              setUserRecommendation(docSnap.data().recommendation); // Set saved recommendation from Firestore
            } else {
              console.log("No document found!");
            }
            setLoading(false); // Set loading to false once data is fetched
          })
          .catch((error) => {
            console.error("Error fetching data: ", error);
            setLoading(false); // Set loading to false even on error
          });
      } else {
        console.log("User is not authenticated.");
        setLoading(false); // Set loading to false if no user is authenticated
      }
    } else {
      setUserRecommendation(recommendation); // Directly use recommendation if passed
      setLoading(false); // If recommendation is passed, we don't need to fetch data
    }
  }, [recommendation]);

  // Compound interest calculation for total portfolio growth (taking into account portfolio weights)
  const calculatePortfolioGrowth = (years, additionalGrowth = 0) => {
    const initialAmount = 1000; // Starting amount in EUR
    const sp500Rate = userRecommendation?.sp500 || 0; // Percentage allocated to SP500
    const top5StocksRate = userRecommendation?.top5Stocks || 0; // Percentage allocated to Top 5 Stocks
    const goldRate = userRecommendation?.gold || 0; // Percentage allocated to Gold
    const tBillRate = userRecommendation?.tBill || 0; // Percentage allocated to T-Bills
    const cashRate = userRecommendation?.cash || 0; // Percentage allocated to Cash

    // Portfolio allocation weights (convert percentages to decimals for calculations)
    const sp500Weight = sp500Rate / 100;
    const top5StocksWeight = top5StocksRate / 100;
    const goldWeight = goldRate / 100;
    const tBillWeight = tBillRate / 100;
    const cashWeight = cashRate / 100;

    // Asset returns (we assume fixed historic average returns for each asset class)
    const sp500Return = 0.07; // SP500 average return (7% per year)
    const top5StocksReturn = 0.12; // Top 5 Stocks average return (12% per year)
    const goldReturn = 0.04; // Gold average return (4% per year)
    const tBillReturn = 0.02; // T-Bills average return (2% per year)
    const cashReturn = 0.01; // Cash return (1% per year)

    // Calculate the weighted average return for the portfolio
    const weightedAverageReturn =
      sp500Return * sp500Weight +
      top5StocksReturn * top5StocksWeight +
      goldReturn * goldWeight +
      tBillReturn * tBillWeight +
      cashReturn * cashWeight;

    // Add any additional growth (for outperforming or underperforming cases)
    const portfolioGrowthRate = weightedAverageReturn + additionalGrowth;

    // Apply compound interest to calculate the portfolio growth over the years
    const growthData = [];
    let currentValue = initialAmount;

    for (let year = 0; year <= years; year++) {
      currentValue = currentValue * (1 + portfolioGrowthRate); // Compound growth
      growthData.push(currentValue);
    }

    return growthData;
  };

  // Chart data for the line chart showing portfolio growth
  const chartData = {
    labels: Array.from({ length: 11 }, (_, i) => i), // Years 0-10
    datasets: [
      {
        label: "Portfolio Growth (including compound interest)",
        data: calculatePortfolioGrowth(10, 0), // Actual growth (baseline)
        borderColor: "rgba(54,162,235,1)",
        backgroundColor: "rgba(54,162,235,0.2)",
        borderWidth: 2,
        fill: true,
      },
      {
        label: "Outperforming Market Expectations (+2.5% annually)",
        data: calculatePortfolioGrowth(10, 0.025), // Outperforming growth (+2.5% annually)
        borderColor: "rgba(75,192,192,1)",
        backgroundColor: "rgba(75,192,192,0.2)",
        borderWidth: 2,
        fill: true,
      },
      {
        label: "Underperforming Market Expectations (-2.5% annually)",
        data: calculatePortfolioGrowth(10, -0.025), // Underperforming growth (-2.5% annually)
        borderColor: "rgba(255,99,132,1)",
        backgroundColor: "rgba(255,99,132,0.2)",
        borderWidth: 2,
        fill: true,
      },
    ],
  };

  // Pie chart data (portfolio breakdown)
  const pieChartData = {
    labels: ["SP500", "Top 5 Stocks", "Gold", "T-Bills", "Cash"],
    datasets: [
      {
        label: "Portfolio Distribution",
        data: [
          userRecommendation?.sp500 || 0,
          userRecommendation?.top5Stocks || 0,
          userRecommendation?.gold || 0,
          userRecommendation?.tBill || 0,
          userRecommendation?.cash || 0,
        ],
        backgroundColor: [
          "rgba(75,192,192,0.6)",
          "rgba(255,99,132,0.6)",
          "rgba(255,159,64,0.6)",
          "rgba(54,162,235,0.6)",
          "rgba(153,102,255,0.6)",
        ],
        borderColor: [
          "rgba(75,192,192,1)",
          "rgba(255,99,132,1)",
          "rgba(255,159,64,1)",
          "rgba(54,162,235,1)",
          "rgba(153,102,255,1)",
        ],
        borderWidth: 1,
      },
    ],
  };

  // If still loading, show loading spinner
  if (loading) {
    return <div>Loading...</div>;
  }

  // Toggle menu visibility
  const toggleMenu = () => setIsMenuOpen(!isMenuOpen);

  // Navigation helpers
  const goToInvestmentQuestionnaire = () => {
    navigate("/investment-questionnaire"); // Navigate to the Investment Questionnaire page
  };

  const goToReceipts = () => navigate("/receipts");
  const goToSettings = () => navigate("/settings");
  const goToProfile = () => navigate("/profile");
  const goToLogin = () => navigate("/login");
  const logOut = () => {
    // Your authentication logic here, for example:
    // auth.signOut();
    setIsMenuOpen(false); // Close menu after logout
    navigate("/login");
  };

  return (
    <div className="recommendation-page">
      <h2>Portfolio Recommendation</h2>

      {/* Menu Button */}
      <button
        onClick={toggleMenu}
        style={{
          padding: "10px 20px",
          fontSize: "16px",
          cursor: "pointer",
          marginTop: "20px", // Adds space from the heading
        }}
      >
        Menu
      </button>

      {/* Dropdown Menu */}
      {isMenuOpen && (
        <div
          style={{
            marginTop: "10px", // Adds space below the button
            backgroundColor: "#fff",
            border: "1px solid #ccc",
            padding: "10px",
            boxShadow: "0 4px 8px rgba(0, 0, 0, 0.1)",
            zIndex: 1000,
          }}
        >
          <ul style={{ listStyle: "none", margin: 0, padding: 0 }}>
            <li style={{ margin: "10px 0" }} onClick={goToProfile}>
              Profile
            </li>
            <li style={{ margin: "10px 0" }} onClick={goToReceipts}>
              Receipts
            </li>
            <li style={{ margin: "10px 0" }} onClick={goToSettings}>
              Settings
            </li>
            <li style={{ margin: "10px 0" }} onClick={logOut}>
              Log Out
            </li>
            <li
              style={{ margin: "10px 0" }}
              onClick={goToInvestmentQuestionnaire}
            >
              Investment Questionnaire
            </li>
          </ul>
        </div>
      )}

      {/* Portfolio Details */}
      <div className="portfolio-details">
        <h3>Your Portfolio Breakdown:</h3>
        <ul>
          <li>SP500: {userRecommendation?.sp500}%</li>
          <li>Top 5 Stocks: {userRecommendation?.top5Stocks}%</li>
          <li>Gold: {userRecommendation?.gold}%</li>
          <li>T-Bills: {userRecommendation?.tBill}%</li>
          <li>Cash: {userRecommendation?.cash}%</li>
        </ul>

        {/* Render Pie Chart */}
        <div className="chart">
          <Pie data={pieChartData} />
        </div>

        {/* Line Chart for Portfolio Growth */}
        <div className="chart">
          <h3>Portfolio Growth (including compound interest)</h3>
          <Line data={chartData} options={{ responsive: true }} />
        </div>
      </div>
    </div>
  );
};

export default RecommendationPage;
