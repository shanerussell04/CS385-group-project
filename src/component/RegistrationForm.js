// Code by SeÃ¡n McConnon
//Comments generated by ChatGPT
// Import necessary modules and functions from React, Firebase, and React Router
import React, { useState } from "react";
import { useNavigate } from "react-router-dom";
import { auth, db } from "../firebase"; // Firebase authentication and Firestore database imports
import { createUserWithEmailAndPassword } from "firebase/auth";
import { doc, setDoc } from "firebase/firestore";

// Array of counties in Ireland for the dropdown selection
const countiesIreland = [
  "Antrim",
  "Armagh",
  "Carlow",
  "Cavan",
  "Clare",
  "Cork",
  "Derry",
  "Donegal",
  "Down",
  "Dublin",
  "Fermanagh",
  "Galway",
  "Kerry",
  "Kildare",
  "Kilkenny",
  "Laois",
  "Leitrim",
  "Limerick",
  "Longford",
  "Louth",
  "Mayo",
  "Meath",
  "Monaghan",
  "Offaly",
  "Roscommon",
  "Sligo",
  "Tipperary",
  "Tyrone",
  "Waterford",
  "Westmeath",
  "Wexford",
  "Wicklow",
];

// Regular expressions for form field validation
const regex = {
  username: /^[a-zA-Z0-9_]{3,15}$/, // Validates usernames (3-15 chars, letters, numbers, underscores)
  email: /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/, // Valid email format
  password: /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)[A-Za-z\d@$!%*?&-_]{8,}$/, // At least one uppercase, lowercase, number, and 8+ chars
  name: /^[a-zA-Z\s'-]{2,}$/, // Validates names with letters, spaces, hyphens, or apostrophes
  age: /^(1[6-9]|[2-9][0-9]|100)$/, // Validates ages between 16 and 100
  income: /^\d+(\.\d{1,2})?$/, // Numeric with up to 2 decimal places
  savings: /^\d+(\.\d{1,2})?$/, // Same format as income
};

// Component for the registration form
const RegistrationForm = () => {
  // State variables to manage form data, validation messages, and navigation
  const [formData, setFormData] = useState({
    username: "",
    email: "",
    password: "",
    name: "",
    age: "",
    income: "",
    county: "",
    employmentStatus: "",
    savings: "",
  });

  const [message, setMessage] = useState(""); // Message for success or failure
  const [errors, setErrors] = useState({}); // Field-specific error messages
  const navigate = useNavigate(); // React Router hook for navigation

  // Predefined error messages for validation
  const errorMessages = {
    username:
      "Username must be 3-15 characters long and can include letters, numbers, and underscores.",
    email: "Please enter a valid email address.",
    password:
      "Password must be at least 8 characters long, include uppercase, lowercase, and a number.",
    name: "Name must contain at least 2 characters and only include letters, spaces, hyphens, or apostrophes.",
    age: "Age must be a number between 16 and 100.",
    income: "Income must be a valid number. Decimal values are allowed.",
    savings: "Savings must be a valid number. Decimal values are allowed.",
    county: "Please select a county.",
    employmentStatus: "Please select an employment status.",
  };

  // Function to validate a specific field based on its name and value
  const validateField = (name, value) => {
    if (regex[name] && !regex[name].test(value)) {
      setErrors((prevErrors) => ({
        ...prevErrors,
        [name]: errorMessages[name],
      }));
      return false;
    }
    setErrors((prevErrors) => {
      const { [name]: _, ...rest } = prevErrors;
      return rest;
    });
    return true;
  };

  // Updates form data and validates fields when changes occur
  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData({ ...formData, [name]: value });

    if (name in regex) validateField(name, value); // Validate only if regex exists
  };

  // Handles the form submission
  const handleRegister = async (e) => {
    e.preventDefault();

    // Validate all fields before submission
    let isValid = true;
    for (const field in formData) {
      if (field in regex) {
        isValid = validateField(field, formData[field]) && isValid;
      } else if (!formData[field]) {
        setErrors((prevErrors) => ({
          ...prevErrors,
          [field]: `Please fill in the ${field}.`,
        }));
        isValid = false;
      }
    }

    if (!isValid) {
      setMessage("Please fix the errors in the form.");
      return;
    }

    try {
      // Create a new user in Firebase authentication
      const userCredential = await createUserWithEmailAndPassword(
        auth,
        formData.email,
        formData.password
      );
      const user = userCredential.user;

      // Save user data to Firestore
      const userRef = doc(db, "users", user.uid);
      await setDoc(userRef, {
        username: formData.username,
        email: formData.email,
        name: formData.name,
        age: formData.age,
        income: formData.income,
        county: formData.county,
        employmentStatus: formData.employmentStatus,
        savings: formData.savings,
      });

      setMessage("Registration successful!"); // Display success message
      setFormData({
        username: "",
        email: "",
        password: "",
        name: "",
        age: "",
        income: "",
        county: "",
        employmentStatus: "",
        savings: "",
      });
      navigate("/dashboard"); // Redirect to dashboard after success
    } catch (error) {
      setMessage("Registration failed. Please try again."); // Handle registration failure
      console.error("Error registering user:", error.message);
    }
  };

  // Navigates to the login page
  const goToLogin = () => navigate("/login");

  return (
    <div className="container d-flex justify-content-center align-items-center min-vh-100">
      <div
        className="card shadow p-4"
        style={{ maxWidth: "600px", width: "100%" }}
      >
        <h2 className="text-center mb-4">Register</h2>
        {message && <div className="alert alert-danger">{message}</div>}
        <form onSubmit={handleRegister}>
          {[
            { label: "Username", name: "username", type: "text" },
            { label: "Email", name: "email", type: "email" },
            { label: "Password", name: "password", type: "password" },
            { label: "Name", name: "name", type: "text" },
            { label: "Age", name: "age", type: "number" },
            { label: "Income", name: "income", type: "number" },
            { label: "Savings", name: "savings", type: "number" },
          ].map((field) => (
            <div className="mb-3" key={field.name}>
              <label htmlFor={field.name} className="form-label">
                {field.label}
              </label>
              <input
                type={field.type}
                name={field.name}
                id={field.name}
                className={`form-control ${
                  errors[field.name] ? "is-invalid" : ""
                }`}
                placeholder={`Enter your ${field.label.toLowerCase()}`}
                value={formData[field.name]}
                onChange={handleChange}
                required
              />
              {errors[field.name] && (
                <div className="invalid-feedback">{errors[field.name]}</div>
              )}
            </div>
          ))}

          {/* Dropdown for selecting county */}
          <div className="mb-3">
            <label htmlFor="county" className="form-label">
              County
            </label>
            <select
              name="county"
              id="county"
              className={`form-select ${errors.county ? "is-invalid" : ""}`}
              value={formData.county}
              onChange={handleChange}
              required
            >
              <option value="">Select a county...</option>
              {countiesIreland.map((county) => (
                <option key={county} value={county}>
                  {county}
                </option>
              ))}
            </select>
            {errors.county && (
              <div className="invalid-feedback">{errors.county}</div>
            )}
          </div>

          {/* Dropdown for employment status */}
          <div className="mb-3">
            <label htmlFor="employmentStatus" className="form-label">
              Employment Status
            </label>
            <select
              name="employmentStatus"
              id="employmentStatus"
              className={`form-select ${
                errors.employmentStatus ? "is-invalid" : ""
              }`}
              value={formData.employmentStatus}
              onChange={handleChange}
              required
            >
              <option value="">Select...</option>
              <option value="employed">Employed</option>
              <option value="unemployed">Unemployed</option>
              <option value="selfEmployed">Self-employed</option>
            </select>
            {errors.employmentStatus && (
              <div className="invalid-feedback">{errors.employmentStatus}</div>
            )}
          </div>

          {/* Submit button */}
          <button type="submit" className="btn btn-primary w-100">
            Register
          </button>
        </form>
        <div className="text-center mt-3">
          <p>
            Already have an account?{" "}
            <span
              onClick={goToLogin}
              style={{ color: "blue", cursor: "pointer" }}
            >
              Login
            </span>
          </p>
        </div>
      </div>
    </div>
  );
};

export default RegistrationForm;
